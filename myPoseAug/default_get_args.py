import argparse
def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--warmup",type=int,default=5,help="warmup epoch")
    parser.add_argument("--epochs", type=int, default=1200, help="number of epochs of training")
    parser.add_argument("--batch_size", type=int, default=32, help="size of the batches")
    parser.add_argument("--G_lr", type=float, default=0.001, help="adam: lr for generator")
    parser.add_argument("--D_lr", type=float, default=0.001, help="adam: lr for discriminator")
    parser.add_argument("--C_lr", type=float, default=0.002, help="adam: lr for classifier")
    parser.add_argument('--blr_tanhlimit', default=2e-1, type=float, help='bone length change limit.')
    parser.add_argument('--blr_limit', default=1e-1, type=float, help='bone length change limit.')
    parser.add_argument("--train",type=str,help="path to data train")
    parser.add_argument("--test",type=str,help="path to data test")
    parser.add_argument('--ba_range_m', default=20.5e-2, type=float, help='bone angle modification range.')
    parser.add_argument('--ba_range_w', default=16.5e-2, type=float, help='bone angle modification range.')
    parser.add_argument("--hardratio_ba_s",type=float,default=3,help="starting value for hardratio ba")
    parser.add_argument("--hardratio_ba",type=float,default=5,help="ending value for hardratio ba")
    parser.add_argument("--hardratio_std_ba",type=float,default=2,help="standard deviation for hardratio ba")
    parser.add_argument("--gloss_factordiv_ba",type=float,default=0.,help="factor for range difference loss")
    parser.add_argument('--gloss_factorfeedback_ba', default=1e-1, type=float, help='factor for feedback loss from ba.')
    parser.add_argument("--hardratio_bl_s",type=float,default=3,help="starting value for hardratio rt")
    parser.add_argument("--hardratio_bl",type=float,default=5,help="ending value for hardratio rt")
    parser.add_argument("--hardratio_std_bl",type=float,default=2,help="standard deviation for hardratio rt")
    parser.add_argument('--gloss_factordiv_bl', default=0., type=float, help='factor for range difference loss')
    parser.add_argument('--gloss_factorfeedback_bl', default=1e-1, type=float, help='factor for feedback loss from bl.')
    parser.add_argument('--gloss_factor_adv',default=6,type=float,help="factor for adversarial loss in gen loss function")
    parser.add_argument('--gloss_factor_diff',default=3,type=float,help="factor for diff loss in gen loss function")
    parser.add_argument('--gloss_factor_feedback',default=1,type=float,help="factor for feedback loss in gen loss function")
    opt = parser.parse_args()
    return opt